#!/usr/bin/env python3

# -*- coding: utf-8 -*-


import sys
import os
import argparse
import re
import subprocess
from Bio import SeqIO

# 获取当前脚本的目录
current_dir = os.path.dirname(os.path.abspath(__file__))

# 将要导入的目录设为与脚本同一层的目录
sys.path.append(os.path.join(current_dir, 'total_step'))

# 导入自定义函数和类
from generate_result import analyze_tfbs_modification
from total_step_integrate_tfbs_and_promoter import GenomeAnalyzer

def main():
    """
    既可输入 FASTA 文件先进行 Prokka 注释生成 GBK，也可直接输入 GBK 文件。
    最终会修正 GBK 文件中的日期格式，然后使用 GenomeAnalyzer 及 analyze_tfbs_modification 进行分析。
    """
    parser = argparse.ArgumentParser(description='Analyze genome using GBK or FASTA file.')
    parser.add_argument('-input_path', type=str, required=True,
                        help='Path to the input file (FASTA or GBK).')
    parser.add_argument('-output_dir', type=str, required=True,
                        help='Path to the output directory.')
    args = parser.parse_args()

    # 从输入文件名获取 accession 名字（去掉路径和扩展名）
    accession = os.path.basename(args.input_path).split('.')[0]

    # 创建输出目录：在用户指定的 output_dir 下再加一层 accession 文件夹
    output_dir = os.path.join(args.output_dir, accession)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # 判断输入文件类型（FASTA or GBK）
    file_ext = os.path.splitext(args.input_path)[1].lower()

    # Prokka 自定义数据库路径（示例：放在脚本当前目录的 blast_of_virus 子目录内）
    db_path = os.path.join(current_dir, 'blast_of_virus', 'prophage_virus.db')

    # 如果是 FASTA，需要先用 Prokka 注释
    if file_ext in ['.fasta', '.fa', '.fna']:
        print(f"[INFO] Detected FASTA file: {args.input_path}")
        prokka_command = [
            'prokka',
            '--outdir', output_dir,
            '--prefix', accession,
            '--force',
            '--kingdom', 'Viruses',
            '--proteins', db_path,  # 使用自定义蛋白数据库
            args.input_path
        ]
        # 运行 Prokka 并检查输出
        try:
            env = os.environ.copy()
            # 如果需要，请修改以下为你自己的 Prokka 所在环境
            env['PATH'] = '/home/hanzequan/miniconda3/envs/DPProm/bin:' + env['PATH']
            subprocess.run(prokka_command, check=True, env=env)
        except subprocess.CalledProcessError as e:
            print(f"Error: Prokka command failed with return code {e.returncode}")
            sys.exit(1)

        # Prokka 生成的 GBK 文件
        gbk_file = os.path.join(output_dir, f"{accession}.gbk")
        if not os.path.exists(gbk_file):
            print(f"Error: Prokka did not generate the expected GBK file at {gbk_file}")
            sys.exit(1)
        print(f"[INFO] GBK file generated by Prokka: {gbk_file}")

    elif file_ext in ['.gbk', '.gb']:
        print(f"[INFO] Detected GBK file: {args.input_path}")
        # 如果输入的 GBK 不在目标 output_dir 下，则复制过去，以保持输出结构一致
        gbk_file = os.path.join(output_dir, f"{accession}.gbk")
        if os.path.abspath(args.input_path) != os.path.abspath(gbk_file):
            import shutil
            shutil.copy2(args.input_path, gbk_file)
        print(f"[INFO] GBK file copied to: {gbk_file}")

    else:
        print("Error: Unsupported file type. Please provide a FASTA (.fasta/.fa/.fna) or GBK (.gbk/.gb) file.")
        sys.exit(1)

    # 修正 GBK 文件中的日期格式（例如把 XX-XX月-XXXX 替换为 XX-AUG-XXXX）
    corrected_gbk_file = os.path.join(output_dir, f"{accession}_corrected.gbk")
    with open(gbk_file, "r", encoding="utf-8") as infile, open(corrected_gbk_file, "w", encoding="utf-8") as outfile:
        for line in infile:
            if line.startswith("LOCUS"):
                # 这里正则匹配类似 01-07月-2023 的日期，并替换为 01-AUG-2023
                line = re.sub(r'(\d{2})-(\d{1,2})月-(\d{4})', r'\1-AUG-\3', line)
            outfile.write(line)

    print(f"[INFO] Corrected GBK file saved: {corrected_gbk_file}")

    # ========== 调用自定义分析部分 ==========
    # 1. 实例化 GenomeAnalyzer 并进行分析
    analyzer = GenomeAnalyzer(corrected_gbk_file, args.input_path, output_dir)
    meme_results, df_promoters, pwm_df = analyzer.analyze_genome()

    # 2. 检查 meme_results 是否为空
    if meme_results is None:
        print("Error: No results found from genome analysis. Please check your input files and Prokka output.")
        sys.exit(1)

    # 3. 调用 analyze_tfbs_modification 进行进一步分析
    analyze_tfbs_modification(
        meme_results,
        df_promoters,
        pwm_df,
        genbank_path=corrected_gbk_file,
        output_path=output_dir
    )

    print("======================================================")
    print("Genome analysis completed successfully.")
    print("Results are saved in:", output_dir)
    print("======================================================")

if __name__ == "__main__":
    main()

